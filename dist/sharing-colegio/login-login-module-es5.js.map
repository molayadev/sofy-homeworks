{"version":3,"sources":["webpack:///src/app/login/components/login/login.component.ts","webpack:///src/app/login/components/login/login.component.html","webpack:///src/app/login/login-routing.module.ts","webpack:///src/app/login/login.module.ts","webpack:///src/app/shared/services/auth.service.ts"],"names":["LoginComponent","authService","router","form","email","password","submitEM","valid","credentials","value","login","emit","navigate","submit","selector","templateUrl","styleUrls","routes","path","component","LoginRoutingModule","forChild","imports","exports","LoginModule","declarations","AuthService","afAuth","authState","subscribe","user","userLogged","JSON","stringify","localStorage","setItem","console","log","signInWithEmailAndPassword","result","setTimeout","logout","passwordResetEmail","sendPasswordResetEmail","removeItem","signOut","providedIn"],"mappings":"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","file":"login-login-module-es5.js","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  form: FormGroup = new FormGroup({\n    email: new FormControl(''),\n    password: new FormControl(''),\n  });\n  @Input() error: string | null;\n  @Output() submitEM = new EventEmitter();\n  constructor(private authService: AuthService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  submit() {\n    if (this.form.valid) {\n      const credentials = this.form.value;\n      this.authService.login(credentials.email, credentials.password);\n      this.submitEM.emit();\n      this.router.navigate(['home']);\n    }\n  }\n\n}\n","<div class=\"card-container\">\n  <mat-card>\n    <mat-card-title>Ingresar</mat-card-title>\n    <mat-card-content>\n\n      <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n        <div class=\"imgcontainer\">\n          <img src=\"./assets/img/img_avatar2.png\" alt=\"Avatar\" class=\"avatar\">\n        </div>\n        <p>\n          <mat-form-field>\n            <input type=\"text\" matInput placeholder=\"Email\" formControlName=\"email\">\n          </mat-form-field>\n        </p>\n\n        <p>\n          <mat-form-field>\n            <input type=\"password\" matInput placeholder=\"ContraseÃ±a\" formControlName=\"password\">\n          </mat-form-field>\n        </p>\n\n        <div class=\"button\">\n          <button type=\"submit\" mat-raised-button color=\"primary\">Aceptar</button>\n        </div>\n\n      </form>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\n\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './components/login/login.component';\nimport { MaterialModule } from '../material/material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    LoginRoutingModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ]\n})\nexport class LoginModule { }\n","import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { User } from 'firebase/app';\nimport { Router } from '@angular/router';\nimport { ROOT_PAGE } from '../../constants/app-config';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  user: User;\n  constructor(public afAuth: AngularFireAuth,\n              private router: Router) {\n    this.afAuth.authState.subscribe(user => {\n      if (user){\n        const userLogged = JSON.stringify(user);\n        localStorage.setItem('user', userLogged);\n        console.log(userLogged);\n      } else {\n        localStorage.setItem('user', null);\n      }\n    });\n  }\n\n  async login(email: string, password: string) {\n    console.log(email, password);\n    const result = await this.afAuth.signInWithEmailAndPassword(email, password);\n    setTimeout(() => this.logout(), 3600000);\n    this.router.navigate([ROOT_PAGE]);\n  }\n\n  async sendPasswordResetEmail(passwordResetEmail: string) {\n    return await this.afAuth.sendPasswordResetEmail(passwordResetEmail);\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n    this.router.navigate(['login']);\n    this.afAuth.signOut();\n  }\n}\n"]}